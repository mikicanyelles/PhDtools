import matplotlib.pyplot as plt
from .translator import points_to_coords, path_energies
from .finder import stationary_points
#from .tricks import define_ticks


def bidimensional_pes(pes, x=None, y=None, ticks=[None,None,None], labels=[None,None], plot_name=None, title=None, lines=False):
    '''
    DESCRIPTION:
        Plots a contour map with the input info.

    ARGUMENTS & FUNCTIONS
        x, y    --> x & y coordinates for plotting.
        ticks   --> energy (z), x & y ticks
        labels  --> x & y ticks, energy is set by default

    TODO
        - [ ] create autogenerated ticks
    '''


    if (x != None) and (y != None):
        if lines == True:
            plt.contour(x, y, pes, 7, cmap='nipy_spectral_r')
        plt.contourf(x, y, pes, 700, cmap='nipy_spectral', corner_mask=True)

    else :
        if lines == True:
            plt.contour(pes, 7, cmap='nipy_spectral_r')
        plt.contourf(pes, 700, cmap='nipy_spectral', corner_mask=True)

    if ticks[1] != None:
        plt.xticks(ticks[1])

    if ticks[2] != None:
        plt.yticks(ticks[2])

    if labels[0] != None:
        plt.xlabel(labels[0])

    if labels[1] != None:
        plt.ylabel(labels[1])

    if ticks[0] != None:
        plt.colorbar(ticks=ticks[0], label='Energy (kcal/mol)')

    if title != '':
        plt.title(title)

    if plot_name != None:
        plt.savefig(plot_name, dpi=300, transparent=False)

    plt.show()


def mins_in_2d_pes(pes, mins, x=None, y=None, ticks=[None,None,None], labels=[None,None], plot_name=None, title=None, lines=False):
    '''
    DESCRIPTION:
        Plots a contour map labeling all the minima pipped as a dict.

    TODO:
        - [ ] consistent plot ticks
    '''

    mins_points, mins_coords = points_to_coords(list(mins.keys()), y, x)

    if (x != None) and (y != None):
        if lines == True:
            plt.contour(x, y, pes, 7, cmap='nipy_spectral_r')
        plt.contourf(x, y, pes, 700, cmap='nipy_spectral', corner_mask=True)

    else :
        if lines == True:
            plt.contour(pes, 7, cmap='nipy_spectral_r')
        plt.contourf(pes, 700, cmap='nipy_spectral', corner_mask=True)

    if ticks[1] != None:
        plt.xticks(ticks[1])

    if ticks[2] != None:
        plt.yticks(ticks[2])

    if labels[0] != None:
        plt.xlabel(labels[0])

    if labels[1] != None:
        plt.ylabel(labels[1])

    if ticks[0] != None:
        plt.colorbar(ticks=ticks[0], label='Energy (kcal/mol)')


    plt.scatter(mins_coords[1], mins_coords[0], color='white', zorder=1)


    bbox = dict(boxstyle='round,pad=0.2', fc='white')

    for i in range(len(mins_coords[0])):

        label = str(list(mins.values())[i])
        if i == 1:
            plt.annotate(label,
                        (mins_coords[1][i], mins_coords[0][i]),
                        textcoords='offset points',
                        xytext=(-20,0),
                        bbox= bbox,
                        ha='center')
        else :
            plt.annotate(label,
                    (mins_coords[1][i], mins_coords[0][i]),
                    textcoords='offset points',
                    xytext=(20,0),
                    bbox= bbox,
                    ha='center')

    if title != None:
        plt.title(title)

    if plot_name != None:
        plt.savefig(plot_name, dpi=300, transparent=False)
    plt.show()


def path_in_2d_pes(pes, paths, x=None, y=None, ticks=[None,None,None], labels=[None,None], path_stationary=[None], plot_name=None, title=None, colours=['white', 'grey', 'darkgrey', 'black']):
    '''
    DESCRIPTION:
        Plots a contour map labeling all the minima pipped as a dict.

    TODO:
        - [ ] consistent plot ticks
    '''

    if (x != None) and (y != None):
        plt.contourf(x, y, pes, 700, cmap='nipy_spectral', corner_mask=True, zorder=-1)

    else :
        plt.contourf(pes, 700, cmap='nipy_spectral', corner_mask=True, zorder=-1)

    if ticks[1] != None:
        plt.xticks(ticks[1])

    if ticks[2] != None:
        plt.yticks(ticks[2])

    if labels[0] != None:
        plt.xlabel(labels[0])

    if labels[1] != None:
        plt.ylabel(labels[1])

    if ticks[0] != None:
        plt.colorbar(ticks=ticks[0], label='Energy (kcal/mol)')


    p = 0 #p is the number of the path in the list
    for path in paths:
        path_points, path_coords = points_to_coords(path, y, x)
        if path_stationary[p] == None:
            path_stationary[p] = stationary_points(path_energies(path, pes))

        path_stationary_points, path_stationary_coords = points_to_coords(list(path_stationary[p].keys()), y, x)

        plt.plot(path_coords[1], path_coords[0], color=colours[p], zorder=0, marker='o')
        plt.scatter(path_stationary_coords[1], path_stationary_coords[0], color='red', zorder=1)

        bbox = dict(boxstyle='round,pad=0.2', fc=colours[p])

        for i in range(len(path_stationary[p])):

            label = list(path_stationary[p].values())[i][0]

            plt.annotate(label,
                (x[list(path_stationary[p].keys())[i][1]], y[list(path_stationary[p].keys())[i][0]]),
                textcoords='offset points',
                xytext=(0.15,0.15),
                bbox= bbox,
                ha='center')

        p += 1

    if title != None:
        plt.title(title)

    if plot_name != None:
        plt.savefig(plot_name, dpi=300, transparent=False)
    plt.show()



def unidimensional_pes(
    pes_x,
    pes_y,
    pes_x2=[], #Optional, useful for a 2nd axis or a second PES
    pes_y2=[], #Optional, useful for a second PES
    markers=True,
    ticks=[], #[x, y, x2, y2]
    labels=[], #[x, y, x2, y2]
    plot_name=None,
    title=None
):
    '''
    DESCRIPTION
        Function for creating simple plots of unidimensional (1 reaction coordinate) PESs Two different reaction coordinates can be input, but only one energy for each point.

    TODO
     - [ ] Consider ticks & labels as input list with no predefined length. Check the length for interpretting x, y & x2.
     - [ ] Possibility of adding a 2nd energy (for plotting 3 different profiles,
        - when x2 but no y2 --> 2nd coordinate, same PES
        - when x2 and y2    --> 2nd PES
    '''

    # TODO Add ticks & labels len checker
    def one_pes_one_axis(
        pes_x,
        pes_y,
        markers,
        ticks,
        labels,
        plot_name,
        title
    ):
        fig, ax1 = plt.subplots()
        color='tab:blue'
        if markers == True:
            ax1.plot(pes_x, pes_y, marker='o', color=color)
        elif markers == False:
            ax1.plot(pes_x, pes_y, color=color)

        if len(labels) > 0:
            if labels[0] != None:
                ax1.set_xlabel(labels[0])
            if len(labels) > 1:
                if labels[1] != None:
                    ax1.set_ylabel(labels[1])

        if len(ticks) > 0:
            if ticks[0] != None:
                ax1.set_xticks(ticks[0])
            if len(ticks) > 1:
                if ticks[1] != None:
                    ax1.set_yticks(ticks[1])


        ax1.grid()
        plt.tight_layout()

        if plot_name != None:
            plt.savefig(plot_name, dpi=300)

        fig.show()


    def one_pes_two_axis(
        pes_x,
        pes_y,
        pes_x2,
        markers,
        ticks,
        labels,
        plot_name,
        title
    ):

        fig, ax1 = plt.subplots()
        color='tab:blue'
        if markers == True:
            ax1.plot(pes_x, pes_y, marker='o', color=color)
        elif markers == False:
            ax1.plot(pes_x, pes_y, color=color)

        ax2 = ax1.twiny()
        color='tab:red'

        if markers == True:
            ax2.plot(pes_x2, pes_y, marker='o', color=color)
        elif markers == False:
            ax2.plot(pes_x2, pes_y, color=color)


        ## Labels
        if len(labels) > 0:
            if labels[0] != None:
                ax1.set_xlabel(labels[0])
        if len(labels) > 1:
            if labels[1] != None:
                ax1.set_ylabel(labels[1])
        if len(labels) > 2:
            if labels[2] != None:
                ax2.set_xlabel(labels[2])

        ## Ticks
        if len(ticks) > 0:
            if ticks[0] != None:
                ax1.set_xticks(ticks[0])
        if len(ticks) > 1:
            if ticks[1] != None:
                ax1.set_yticks(ticks[1])
        if len(ticks) > 2:
            if ticks[2] != None:
                ax2.set_xticks(ticks[2])

        ax2.tick_params(axis='x', labelcolor=color)


        ax1.grid()
        plt.tight_layout()

        if plot_name != None:
            plt.savefig(plot_name, dpi=300)

        fig.show()


    def two_pes(
        pes_x,
        pes_y,
        pes_x2,
        pes_y2,
        markers,
        ticks,
        labels,
        plot_name,
        title
    ):

        fig, ax1 = plt.subplots()
        color='tab:blue'
        if markers == True:
            ax1.plot(pes_x, pes_y, marker='o', color=color)
        elif markers == False:
            ax1.plot(pes_x, pes_y, color=color)

        ax2 = ax1.twiny()
        color='tab:red'

        if markers == True:
            ax2.plot(pes_x2, pes_y2, marker='o', color=color)
        elif markers == False:
            ax2.plot(pes_x2, pes_y2, color=color)


        ## Labels
        if len(labels) > 0:
            if labels[0] != None:
                ax1.set_xlabel(labels[0])
        if len(labels) > 1:
            if labels[1] != None:
                ax1.set_ylabel(labels[1])
        if len(labels) > 2:
            if labels[2] != None:
                ax2.set_xlabel(labels[2])
        if len(labels) > 3:
            if labels[3] != None:
                ax2.set_ylabel(labels[3])

        ## Ticks
        if len(ticks) > 0:
            if ticks[0] != None:
                ax1.set_xticks(ticks[0])
        if len(ticks) > 1:
            if ticks[1] != None:
                ax1.set_yticks(ticks[1])
        if len(ticks) > 2:
            if ticks[2] != None:
                ax2.set_xticks(ticks[2])
        if len(ticks) > 3:
            if ticks[3] != None:
                ax2.set_yticks(ticks[3])

        ax1.tick_params(axis='x', labelcolor='tab:blue')
        ax2.tick_params(axis='x', labelcolor='tab:red')


        ax1.grid()
        plt.tight_layout()

        if plot_name != None:
            plt.savefig(plot_name, dpi=300)

        fig.show()

    if len(pes_x2) == 0 and len(pes_y2) == 0:
        one_pes_one_axis(pes_x, pes_y, markers, ticks, labels, plot_name, title)
    elif len(pes_x2) != 0 and len(pes_y2) == 0:
        one_pes_two_axis(pes_x, pes_y, pes_x2, markers, ticks, labels, plot_name, title)
    elif len(pes_x2) != 0 and len(pes_y2) != 0:
        two_pes(pes_x, pes_y, pes_x2, pes_y2, markers, ticks, labels, plot_name, title)